import os
import json
import shutil
from datetime import datetime
from typing import List, Dict
import tempfile

class VideoClipManager:
    """Manages video clips generated by the QA system"""
    
    def __init__(self, clips_dir: str = "generated_clips"):
        self.clips_dir = clips_dir
        self.metadata_file = os.path.join(clips_dir, "clips_metadata.json")
        self.ensure_clips_directory()
        
    def ensure_clips_directory(self):
        """Create clips directory if it doesn't exist"""
        if not os.path.exists(self.clips_dir):
            os.makedirs(self.clips_dir)
            print(f"üìÅ Created clips directory: {self.clips_dir}")
    
    def save_clip_with_metadata(self, temp_clip_path: str, query: str, answer: str, 
                              start_time: float, end_time: float, video_source: str) -> str:
        """Save a temporary clip to permanent storage with metadata"""
        if not os.path.exists(temp_clip_path):
            return None
        
        # Generate permanent filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        video_name = os.path.splitext(os.path.basename(video_source))[0]
        permanent_filename = f"{video_name}_{timestamp}_{int(start_time)}_{int(end_time)}.mp4"
        permanent_path = os.path.join(self.clips_dir, permanent_filename)
        
        # Copy clip to permanent location
        try:
            shutil.copy2(temp_clip_path, permanent_path)
            
            # Save metadata
            metadata = {
                'filename': permanent_filename,
                'query': query,
                'answer': answer,
                'start_time': start_time,
                'end_time': end_time,
                'duration': end_time - start_time,
                'video_source': video_source,
                'created_at': datetime.now().isoformat(),
                'file_size': os.path.getsize(permanent_path)
            }
            
            self.add_clip_metadata(metadata)
            print(f"üíæ Saved clip: {permanent_filename}")
            return permanent_path
            
        except Exception as e:
            print(f"‚ùå Error saving clip: {e}")
            return None
    
    def add_clip_metadata(self, metadata: Dict):
        """Add metadata for a new clip"""
        # Load existing metadata
        all_metadata = self.load_all_metadata()
        
        # Add new metadata
        all_metadata.append(metadata)
        
        # Save updated metadata
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(all_metadata, f, indent=2, ensure_ascii=False)
    
    def load_all_metadata(self) -> List[Dict]:
        """Load all clip metadata"""
        if not os.path.exists(self.metadata_file):
            return []
        
        try:
            with open(self.metadata_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    
    def search_clips(self, query: str = None, video_source: str = None) -> List[Dict]:
        """Search clips by query or video source"""
        all_metadata = self.load_all_metadata()
        results = []
        
        for clip in all_metadata:
            match = True
            
            if query and query.lower() not in clip.get('query', '').lower():
                match = False
            
            if video_source and video_source not in clip.get('video_source', ''):
                match = False
            
            if match:
                results.append(clip)
        
        return results
    
    def list_all_clips(self):
        """List all saved clips with their metadata"""
        all_metadata = self.load_all_metadata()
        
        if not all_metadata:
            print("üì≠ No clips saved yet.")
            return
        
        print(f"üìö Found {len(all_metadata)} saved clips:")
        print("-" * 80)
        
        for i, clip in enumerate(all_metadata, 1):
            duration = clip.get('duration', 0)
            size_mb = clip.get('file_size', 0) / (1024 * 1024)
            
            print(f"{i}. {clip['filename']}")
            print(f"   Query: {clip.get('query', 'N/A')[:60]}...")
            print(f"   Duration: {duration:.1f}s | Size: {size_mb:.1f}MB")
            print(f"   Created: {clip.get('created_at', 'N/A')}")
            print(f"   Source: {os.path.basename(clip.get('video_source', 'N/A'))}")
            print()
    
    def cleanup_temp_clips(self, temp_clips: List[str]):
        """Clean up temporary clip files"""
        for clip_path in temp_clips:
            try:
                if os.path.exists(clip_path):
                    # Get the temp directory
                    temp_dir = os.path.dirname(clip_path)
                    # Remove the entire temp directory
                    shutil.rmtree(temp_dir, ignore_errors=True)
                    break  # Only need to remove the directory once
            except Exception as e:
                print(f"‚ö†Ô∏è Warning: Could not clean up temp file {clip_path}: {e}")
    
    def get_clip_stats(self) -> Dict:
        """Get statistics about saved clips"""
        all_metadata = self.load_all_metadata()
        
        if not all_metadata:
            return {'total_clips': 0, 'total_size_mb': 0, 'total_duration': 0}
        
        total_size = sum(clip.get('file_size', 0) for clip in all_metadata)
        total_duration = sum(clip.get('duration', 0) for clip in all_metadata)
        
        return {
            'total_clips': len(all_metadata),
            'total_size_mb': total_size / (1024 * 1024),
            'total_duration': total_duration,
            'avg_duration': total_duration / len(all_metadata) if all_metadata else 0
        }

def main():
    """CLI interface for clip manager"""
    manager = VideoClipManager()
    
    while True:
        print("\nüé¨ Video Clip Manager")
        print("1. List all clips")
        print("2. Search clips")
        print("3. Show statistics")
        print("4. Exit")
        
        choice = input("\nSelect option (1-4): ").strip()
        
        if choice == '1':
            manager.list_all_clips()
        
        elif choice == '2':
            query = input("Enter search query (or press Enter to skip): ").strip()
            video_source = input("Enter video source name (or press Enter to skip): ").strip()
            
            results = manager.search_clips(
                query if query else None,
                video_source if video_source else None
            )
            
            if results:
                print(f"\nüîç Found {len(results)} matching clips:")
                for i, clip in enumerate(results, 1):
                    print(f"{i}. {clip['filename']} - {clip.get('query', 'N/A')[:50]}...")
            else:
                print("üîç No matching clips found.")
        
        elif choice == '3':
            stats = manager.get_clip_stats()
            print(f"\nüìä Clip Statistics:")
            print(f"   Total clips: {stats['total_clips']}")
            print(f"   Total size: {stats['total_size_mb']:.1f} MB")
            print(f"   Total duration: {stats['total_duration']:.1f} seconds")
            print(f"   Average duration: {stats['avg_duration']:.1f} seconds")
        
        elif choice == '4':
            break
        
        else:
            print("‚ùå Invalid option. Please try again.")

if __name__ == "__main__":
    main()
